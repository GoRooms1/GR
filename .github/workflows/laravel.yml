name: check and deploy

on: 
#  push:
  workflow_dispatch
#    branches: 
#      - develop

jobs:
  build:
    runs-on: ubuntu-latest
#    container: 
#      image: kirschbaumdevelopment/laravel-test-runner:8.1
# image not have services and sudo
    env:
      ROOT_PASSWORD: root
      ROOT_USER: root
      MYSQL_DB: gorooms
      MYSQL_DB_TEST: gorooms_test
      
    # in service use env variable for current service. for mysql - MYSQL_ROOT_PASSWORD
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ env.MYSQL_DB }}

        ports:
          - 3306
        options: >-
          --health-cmd="mysqladmin ping" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5

      redis:
        image: redis
        ports:
          - 6379/tcp
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
        
    - name: Set up MySQL
      run: |
        sudo apt install net-tools
        sudo systemctl start mysql
        sudo netstat -ntulp
        sudo mysql -e 'show grants;' -u${{ env.ROOT_USER }} -p${{ env.ROOT_PASSWORD }} --host 127.0.0.1
        sudo mysql -e 'show databases;' -u${{ env.ROOT_USER }} -p${{ env.ROOT_PASSWORD }} --host 127.0.0.1
        mysql -e 'CREATE DATABASE ${{ env.MYSQL_DB }};' -u${{ env.ROOT_USER }} -p${{ env.ROOT_PASSWORD }} --host 127.0.0.1
        mysql -e 'CREATE DATABASE ${{ env.MYSQL_DB_TEST }};' -u${{ env.ROOT_USER }} -p${{ env.ROOT_PASSWORD }} --host 127.0.0.1
#        sudo systemctl start redis-server

    - name: checkout repo
      uses : actions/checkout@v3 
    
    - name: setup node
      uses: actions/setup-node@v3
      with:
        node-version: '16.x'     
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.1
        extensions: dom, curl, mbstring, libxml, zip, gd, json, mysql, readline, bz2    
   
    - name: Install Composer dependencies
      run: |
        php -r "file_exists('.env') || copy('.env.example', '.env');"
        sudo apt install -y composer
        composer install
        
    - name: Install node
      run : |
        sudo apt install -y nodejs
        curl -L https://npmjs.org/install.sh | sudo sh
        npm install
        
    - name: Create env.testing
      run : |
        cat > .env.testing <<EOF    
        APP_NAME=Gorooms.ru
        APP_ENV=local
        APP_KEY=${{ secrets.APPKEY }}
        APP_DEBUG=true
        APP_URL=http://gorooms.local
        LOG_CHANNEL=stack
        DB_CONNECTION=mysql
        DB_HOST=127.0.0.1
        DB_PORT=3306
        DB_DATABASE=${{ env.MYSQL_DB_TEST }}
        DB_USERNAME=${{ env.ROOT_USER }}
        DB_PASSWORD=${{ env.ROOT_PASSWORD }}
        BROADCAST_DRIVER=log
        CACHE_DRIVER=file
        QUEUE_CONNECTION=sync
        SESSION_DRIVER=file
        SESSION_LIFETIME=120
        REDIS_HOST=127.0.0.1
        REDIS_PASSWORD=null
        REDIS_PORT=6379
        MAIL_MAILER=smtp
        MAIL_HOST=mailhog
        MAIL_PORT=1025
        MAIL_USERNAME=
        MAIL_PASSWORD=
        MAIL_ENCRYPTION=ssl
        MAIL_FROM_ADDRESS="${{ secrets.EMAIL }}"
        MAIL_FROM_NAME="GoRooms"
        AWS_ACCESS_KEY_ID=
        AWS_SECRET_ACCESS_KEY=
        AWS_DEFAULT_REGION=us-east-1
        AWS_BUCKET=
        PUSHER_APP_ID=
        PUSHER_APP_KEY=
        PUSHER_APP_SECRET=
        PUSHER_APP_CLUSTER=mt1
        MIX_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
        MIX_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"
        LOCAL=true
        XDG_RUNTIME_DIR=./psysh
        FORCE_HTTPS=false
        IMAGE_PATH_GLIDE='storage/app/public'
        VITE_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
        VITE_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"
        RAY_HOST=localhost
        EOF
        
    - name: Create env.testing
      run : cat .env.testing
        
        
    - name: Check application
      run : |
        php artisan migrate --force
        php artisan storage:link
        npm run build
        make check
        make test
        
              
  deploy:
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - uses: actions/checkout@v3
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          port: ${{ secrets.PORT }}
          key: ${{ secrets.SSHKEY }}
          script: "cd ${{ secrets.PATHGOROOMS }} && ./.scripts/check.sh"

