<?php

namespace Domain\Article\Models;

use App\Parents\Model;
use App\Traits\CreatedAtOrdered;
use App\User;
use Domain\Article\Factories\ArticleFactory;
use Domain\Image\Models\Image;
use Domain\Image\Traits\UseImages;
use Eloquent;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Cache;
use Spatie\Image\Manipulations;
use Spatie\MediaLibrary\HasMedia;
use Spatie\MediaLibrary\InteractsWithMedia;
use Spatie\MediaLibrary\MediaCollections\Models\Media;
use Support\DataProcessing\Traits\ClearValidated;
use Support\Dates\Traits\RusMonth;

/**
 * App\Models\Article
 *
 * @property int                     $id
 * @property string                  $title
 * @property string                  $slug
 * @property string                  $notice
 * @property string                  $content
 * @property int|null                $user_id
 * @property string|null             $deleted_at
 * @property Carbon|null             $created_at
 * @property Carbon|null             $updated_at
 * @property-read Image              $image
 * @property-read Collection|Image[] $images
 * @property-read int|null           $images_count
 * @property-read User|null          $user
 *
 * @method static Builder|Article newModelQuery()
 * @method static Builder|Article newQuery()
 * @method static Builder|Article query()
 * @method static Builder|Article whereContent($value)
 * @method static Builder|Article whereCreatedAt($value)
 * @method static Builder|Article whereDeletedAt($value)
 * @method static Builder|Article whereId($value)
 * @method static Builder|Article whereNotice($value)
 * @method static Builder|Article whereSlug($value)
 * @method static Builder|Article whereTitle($value)
 * @method static Builder|Article whereUpdatedAt($value)
 * @method static Builder|Article whereUserId($value)
 * @mixin Eloquent
 */
class Article extends Model implements HasMedia
{
    use InteractsWithMedia;
    use RusMonth;
    use ClearValidated;
    use CreatedAtOrdered;
    use HasFactory;

    protected $fillable = [
        'title',
        'notice',
        'content',
        'slug',
        'user_id',
        'meta_title',
        'meta_description',
        'meta_keywords',
        'published',
    ];

    protected $casts = [
        'published' => 'boolean',
        'deleted_at' => 'datetime:Y-m-d\TH:i:sP',     
        'created_at' => 'datetime:Y-m-d\TH:i:sP',
        'updated_at' => 'datetime:Y-m-d\TH:i:sP',
    ];
   
    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::creating(function (self $article) {
            Cache::forget('sitemap.2g');
        });
        self::updating(function (self $article) {
            Cache::forget('sitemap.2g');
        });
        self::deleting(function (self $article) {
            Cache::forget('sitemap.2g');
        });
    }

    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    public function getRouteKeyName()
    {
        return 'slug';
    }

    public function registerMediaConversions(Media $media = null): void
    {
        $this->addMediaConversion('thumb')
            ->nonQueued()
            ->format(Manipulations::FORMAT_WEBP)            
            ->crop(Manipulations::CROP_CENTER, 100, 50);            
              
        $this->addMediaConversion('card')
            ->nonQueued()
            ->format(Manipulations::FORMAT_WEBP)
            ->crop(Manipulations::CROP_CENTER, 624, 306);
    }

    protected static function newFactory(): ArticleFactory
    {
        return ArticleFactory::new();
    }
}
